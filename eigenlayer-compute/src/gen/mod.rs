// DO NOT EDIT: This file is auto-generated by the EigenCompute CLI
// Any changes made to this file will be overwritten when the project is regenerated

use jsonrpsee::server::ServerBuilder;
use std::net::SocketAddr;


pub mod server;
pub use server::*;

// Re-export common types and utilities for clean user imports
pub use jsonrpsee::core::RpcResult;
pub use alloy_primitives::{Bytes, U256};

// Helper functions for cleaner user code
#[allow(dead_code)]
pub fn not_implemented<T>() -> RpcResult<T> {
    Err(jsonrpsee::types::ErrorObject::owned(-32603, "Method not implemented", None::<()>).into())
}

// Embed the OpenRPC schema file at compile time
const OPENRPC_SCHEMA_JSON: &str = include_str!("IConfidentialInsuranceSpec.openrpc.json");

// Embed the ABI file at compile time
const ABI_JSON: &str = include_str!("IConfidentialInsuranceSpec.abi.json");

pub async fn start_server<T>(server: T, port: u16) -> Result<(), Box<dyn std::error::Error>>
where
    T: ConfidentialInsuranceRpcServer,
{
    let server_addr: SocketAddr = format!("0.0.0.0:{}", port).parse()?;
    
    let server_handle = ServerBuilder::default()
        .build(server_addr)
        .await?;
    
    let mut module = server.into_rpc();

    // Register system methods
    module.register_method("system_health", |_, _, _| -> jsonrpsee::core::RpcResult<serde_json::Value> {
        Ok(serde_json::json!({ "status": "ok" }))
    })?;

    // Register the 'rpc.discover' method to serve the OpenRPC schema
    module.register_method("rpc.discover", |_, _, _| -> jsonrpsee::core::RpcResult<serde_json::Value> {
        let openrpc_schema: serde_json::Value = serde_json::from_str(OPENRPC_SCHEMA_JSON)
            .map_err(|e| {
                jsonrpsee::types::ErrorObject::owned(-32000, "Internal error: Failed to parse OpenRPC schema", Some(e.to_string()))
            })?;
        Ok(openrpc_schema)
    })?;

    // Register the 'abi.discover' method to serve the ABI
    module.register_method("abi.discover", |_, _, _| -> jsonrpsee::core::RpcResult<serde_json::Value> {
        let abi: serde_json::Value = serde_json::from_str(ABI_JSON)
            .map_err(|e| {
                jsonrpsee::types::ErrorObject::owned(-32000, "Internal error: Failed to parse ABI", Some(e.to_string()))
            })?;
        Ok(abi)
    })?;
    
    let handle = server_handle.start(module);
    
    println!("ConfidentialInsuranceSpec Server started on http://{}", server_addr);
    
    handle.stopped().await;
    Ok(())
}
