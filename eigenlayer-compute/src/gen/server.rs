// DO NOT EDIT: This file is auto-generated by the EigenCompute CLI
// Any changes made to this file will be overwritten when the project is regenerated
// To implement your business logic, edit src/handlers.rs instead

use jsonrpsee::{
    core::RpcResult,
    proc_macros::rpc,
};
use alloy_primitives::{Bytes, U256};

#[rpc(server)]
pub trait ConfidentialInsuranceRpc {
    /// Function aggregateAttestations from IConfidentialInsuranceSpec
    #[method(name = "compute_aggregateAttestations")]
    async fn aggregate_attestations(&self, attestations: Vec<U256>, signatures: Vec<Bytes>, operator_public_keys: Vec<Bytes>, threshold: U256) -> RpcResult<(U256, bool)>;
    /// Function calculateImpermanentLoss from IConfidentialInsuranceSpec
    #[method(name = "compute_calculateImpermanentLoss")]
    async fn calculate_impermanent_loss(&self, initial_token_a_amount: U256, initial_token_b_amount: U256, current_token_a_price: U256, current_token_b_price: U256, initial_token_a_price: U256, initial_token_b_price: U256, pool_fee_rate: U256) -> RpcResult<(U256, bool)>;
    /// Function calculatePayout from IConfidentialInsuranceSpec
    #[method(name = "compute_calculatePayout")]
    async fn calculate_payout(&self, policy_id: U256, impermanent_loss: U256, coverage_amount: U256, deductible: U256, coverage_ratio: U256) -> RpcResult<U256>;
    /// Function validateOraclePrices from IConfidentialInsuranceSpec
    #[method(name = "compute_validateOraclePrices")]
    async fn validate_oracle_prices(&self, price_data: Vec<U256>, timestamps: Vec<U256>, deviation_threshold: U256) -> RpcResult<(bool, Vec<U256>)>;
    /// Function verifyEncryptedAttestation from IConfidentialInsuranceSpec
    #[method(name = "compute_verifyEncryptedAttestation")]
    async fn verify_encrypted_attestation(&self, encrypted_attestation: Bytes, proof: Bytes, public_inputs: Vec<U256>) -> RpcResult<(bool, U256)>;
}
